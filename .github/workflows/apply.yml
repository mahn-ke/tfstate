# Required environment variables:
# - NGINX_HOME: Directory containing nginx.exe (https://nginx.org/)
# - ACME_HOME:  Directory containing wacs.exe (https://www.win-acme.com/)
# - CERT_HOME:  Directory containing certificates generated by ACME
#
# Required binaries/tools:
# - docker
# - docker compose

name: Deploy service, generate certificates, and update NGINX configuration

on:
  push:
    branches:
      - main

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    env:
      ALLINKL_KAS_LOGIN: ${{ secrets.ALLINKL_KAS_LOGIN }}
      ALLINKL_KAS_AUTH_DATA: ${{ secrets.ALLINKL_KAS_AUTH_DATA }}
    outputs:
      exitcode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - run: terraform version

      - run: terraform init

      - name: terraform plan
        id: plan
        continue-on-error: true
        run: | 
          terraform plan --out=tfplan --detailed-exitcode

      - name: Check Terraform plan exit code
        run: |
          echo "exitcode: ${{ steps.plan.outputs.exitcode }}"
          if grep -q "No configuration files" <<<"${{ steps.plan.outputs.stderr }}"; then
            echo "No configuration files found; skipping apply"
          else
            echo "Configuration files found; applying"
          fi

      - name: Upload Terraform plan
        if: steps.plan.outputs.exitcode == 2
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

  terraform-apply:
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform-plan]
    if: needs.terraform-plan.outputs.exitcode == 2
    steps:
      - name: Expose github environment as shell variables
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          to_envs() { jq -r "to_entries[] | \"\(.key)<<$EOF\n\(.value)\n$EOF\n\""; }
          echo "$SECRETS_CONTEXT" | to_envs >> $GITHUB_ENV


      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - run: terraform version
          
      - run: terraform init

      - name: Download Terraform plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - run: terraform apply -auto-approve tfplan

  deploy:
    runs-on: hetzner2
    if: always()
    needs: [terraform-plan, terraform-apply]
    steps:
      - name: fail if terraform jobs failed
        if: ${{ needs.terraform-plan.result == 'failure' || needs.terraform-apply.result == 'failure' }}
        run: exit 1

      - name: Expose github environment as shell variables
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
          $EOF = [System.Guid]::NewGuid().ToString("N").Substring(0,16)
          $secrets = $env:SECRETS_CONTEXT | ConvertFrom-Json
          foreach ($pair in $secrets.PSObject.Properties) {
            Add-Content -Path $env:GITHUB_ENV -Value "$($pair.Name)<<$EOF`n$($pair.Value)`n$EOF"
          }

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check versions
        run: | 
          docker version
          docker compose version
          nginx -v

      - name: Run Docker Compose
        run: docker compose up -d

      - name: Attempt subomain deployment, if required
        run: ./tools/Deploy.ps1
        shell: pwsh